#!/usr/bin/env python3

"""
This program is part of MoaT.
Its job is simply to extract values from a YAML-formatted config file.
"""

from Cfg import Cfg
import sys
import os
import re

### copied from port.h
PO_OFF=0
PO_ON=1
PO_Z=2
PO_PULLUP=3

PFLG_ALERT=  (1<<2)
PFLG_ALT  =  (1<<3)
PFLG_ALT2 =  (1<<4)

### copied from adc.h
ADC_VBG=1
ADC_VGND=2
ADC_VTEMP=3
ADC_ALT=(1<<3)
ADC_REF=(1<<4)
ADC_ALERT=(1<<5)

### copied from temp.h
TEMP_ALERT=(1<<5)

### copied from pwm.h
PWM_ALERT=(1<<0)
PWM_FORCE=(1<<1)

### copied from count.h
CF_ALERTING=(1<<0)
CF_FALLING_ONLY=(1<<1)
CF_RISING_ONLY=(1<<2)

follow=True
xstr = re.compile("^x([0-9a-fA-F]{2}){1,}$")

# These need to be in the loader
basetypes = ('console',)

def moat_files(s,k):
    for f in s.subtree('codes','types'):
        if f.startswith('_'):
            f = f[1:]
        f = 'moat_'+f
        if os.path.exists(f+'.c'):
            yield f+'.c'

    seen = set()
    for i in range(int(s.subtree('devices',k,'types','temp'))):
        v = s.subtree('devices',k,'temp',str(i))
        driver,dev = v.split('=')
        if driver in seen:
            continue
        yield 'temp_{}.h'.format(driver)
        seen.add(driver)

def main(cfg_name,*kk):
    s = Cfg(cfg_name)
    if kk:
        mode = ""
        for k in kk:
            if mode == "":
                if k[0] == '.':
                    if k == '.devs':
                        print(" ".join(sorted(k for k in s.subtree("devices") if not k.startswith('_'))))
                    if k == ".follow":
                        s.follow = True
                    elif k == ".nofollow":
                        s.follow = False
                    else:
                        mode = k[1:]
                else:
                    did=[]
                    ks = k.split('.')
                    res = s.subtree(*ks)
                    if isinstance(res,dict):
                        print(" ".join("{}={}".format(a,v) for a,v in s.keyval(*ks)))
                    elif isinstance(res,(list,tuple)):
                        print(" ".join(str(x) for x in res))
                    elif isinstance(res,str) and xstr.match(res):
                        print(res[1:])
                    else:
                        try:
                            f = float(res)
                        except Exception:
                            print(res)
                        else:
                            g = int(f)
                            if float(g) == f:
                                print(g)
                            else:
                                print(f)
            elif mode == "hdr":
                BL = s.subtree('devices',k,'defs','use_bootloader')
                with open("device/"+k+"/_port.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the list of input/output ports for
 * the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    for i in range(1, int(s.subtree('devices',k,'types','port'))+1):
                        v = s.subtree('devices',k,'port',str(i))
                        flg=0
                        p=0
                        if isinstance(v,int): v = str(v)
                        assert len(v)>=2 and len(v) <=6, v
                        for vv in v:
                            if vv >= 'A' and vv <= 'Z':
                                assert not p
                                p |= (ord(vv)-ord("A"))<<3
                            elif vv >= '0' and vv <= '7':
                                assert not (p&0x7)
                                p |= ord(vv)-ord("0")
                            elif vv == "^": flg|=PO_ON
                            elif vv == "_": flg|=PO_OFF
                            elif vv == "+": flg|=PO_PULLUP
                            elif vv == "~": flg|=PO_Z       ## high-impedance
                            elif vv == "/": flg|=PFLG_ALT   ## alt switch 1: low vs. pullup
                            elif vv == "!": flg|=PFLG_ALT2  ## alt switch 2: lw vs. Z
                            elif vv == "*": flg|=PFLG_ALERT ## participate in alerting
                            else: assert 0,vv
                        print('{'+"{},{}".format(p,flg)+'},',file=f)

                with open("device/"+k+"/_adc.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the list of analog inputs for
 * the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    for i in range(1, int(s.subtree('devices',k,'types','adc'))+1):
                        v = s.subtree('devices',k,'adc',str(i))
                        flg=0
                        p=0
                        if isinstance(v,int): v = str(v)
                        assert len(v)>=1 and len(v) <=3
                        for vv in v:
                            if vv >= '0' and vv <= '7':
                                assert not (flg&0xF)
                                flg |= ord(vv)-ord("0")
                                p=1
                            elif vv == "R":
                                assert not p
                                flg|=ADC_ALT|ADC_VBG
                                p=1
                            elif vv == "G":
                                assert not p
                                flg|=ADC_ALT|ADC_VGND
                                p=1
                            elif vv == "T":
                                assert not p
                                flg|=ADC_ALT|ADC_VTEMP
                                p=1
                            elif vv == "-": flg|=ADC_REF   ## use ref voltage as max
                            elif vv == "*": flg|=ADC_ALERT ## participate in alerting
                            else: assert 0,vv
                        assert p
                        print('{'+"{},".format(flg)+'},',file=f)

                temp_dr = {}
                temp_nam = []
                with open("device/"+k+"/_temp.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the list of temperature inputs for
 * the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    for i in range(int(s.subtree('devices',k,'types','temp'))):
                        v = s.subtree('devices',k,'temp',str(i))
                        flg=0
                        p=0
                        if v[-1] == '*':
                            flg |= TEMP_ALERT
                            v = v[:-1]
                        try:
                            driver,dev = v.split('=')
                        except ValueError:
                            raise SyntaxError("expected driver=number, got "+repr(v))
                        dev = int(dev)
                        if driver not in temp_dr:
                            temp_dr[driver] = len(temp_nam)
                            temp_nam.append(driver)
                        flg |= temp_dr[driver]
                        print('{'+"{},{}".format(flg,dev)+'},',file=f)

                with open("device/"+k+"/_temp_defs.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the list of analog inputs for
 * the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    for dr in temp_nam:
                        print("TEMP_TC_DEFINE({})".format(dr), file=f)

                with open("device/"+k+"/_pwm.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the list of ports to do PWM with
 * on the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    seen = set()
                    for i in range(1, int(s.subtree('devices',k,'types','pwm'))+1):
                        v = s.subtree('devices',k,'pwm',str(i))
                        flg = 0
                        port = 0
                        p = False
                        if isinstance(v,int): v = str(v)
                        assert len(v)>=1 and len(v) <=3
                        for vv in v:
                            if vv >= '0' and vv <= '9':
                                assert not flg, v
                                port = 10*port+(ord(vv)-ord('0'))
                                p = True
                            elif vv == "*": flg|=PWM_ALERT ## participate in alerting
                            elif vv == "!": flg|=PWM_FORCE ## immediately switch
                            else: assert 0,vv
                        assert p, v
                        if v in seen:
                            print("Warning: PWM %d is known"%v,file=sys.stderr)
                            continue
                        seen.add(v)
                        print('{'+"{},{}".format(port,flg)+'},',file=f)

                with open("device/"+k+"/_count.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the list of ports to count
 * transitions of, for the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    seen = set()
                    for i in range(1, int(s.subtree('devices',k,'types','count'))+1):
                        v = s.subtree('devices',k,'count',str(i))
                        flg=0
                        p=0
                        if isinstance(v,str):
                            pin=""
                            for vv in v:
                                if vv == '*': flg |= CF_ALERTING
                                elif vv == '+': flg |= CF_RISING_ONLY
                                elif vv == '-': flg |= CF_FALLING_ONLY
                                elif vv >= '0' and vv <= '7':
                                    pin+=vv
                                else: assert 0,vv

                            v = int(pin)
                            if (flg & CF_RISING_ONLY) and (flg & CF_FALLING_ONLY):
                                raise Exception("Counter %d must choose between falling OR rising edge. Or remove both flags to trigger on each edge."%i)
                        if v in seen:
                            print("Warning: Count %d is known"%v,file=sys.stderr)
                            continue
                        seen.add(v)
                        print('{'+"{},{}".format(v,flg)+'},',file=f)

                i = 0
                typecode = {}
                typecodes = []
                for a in s.subtree('codes','types'):
                    if a.startswith('_'):
                        a = a[1:]
                    else:
                        typecode[a]=i
                    typecodes.append(a)
                    i += 1

                max_t = 2 # config, alert
                typecount = [0]*i
                for a,v in s.keyval('devices',k,'types'):
                    v = int(v)
                    if v and max_t < typecode[a]:
                        max_t = typecode[a]
                    typecount[typecode[a]] = v

                i = 0
                statuscode = {}
                statuscodes = []
                for a in s.subtree('codes','status'):
                    if a.startswith('_'):
                        a = a[1:]
                    else:
                        statuscode[a]=i
                    statuscodes.append(a)
                    i += 1
                max_s = i

                with open("device/"+k+"/_nums.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the number of devices, for the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    typecount[0] = len(s.subtree('codes','blocks'))
                    typecount[1] = max_t
                    for i in range(max_t+1):
                        a = typecodes[i]
                        print("{}, // {}".format(typecount[i],a), file=f)

                with open("device/"+k+"/_def.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the device codes, for the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    for i in range(max_t+1):
                        a = typecodes[i]
                        print("TC_DEFINE({})".format(a), file=f)

                with open("device/"+k+"/_status.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the status codes for the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    for n,v in statuscode.items():
                        print("#define S_{} {}".format(n,v), file=f)
                    print("#define STATUS_MAX {}".format(max_s), file=f)

                with open("device/"+k+"/dev_config.h","w") as f:
                    print("""\
#ifndef device_{}_config_h
#define device_{}_config_h

/*
 * This file is auto-generated. It contains a mix of global and local
 * definitions because I am lazy.
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,k,cfg_name), file=f)

                    i = 0
                    print("typedef enum _ConfigID {", file=f)
                    for a in s.subtree('codes','blocks'):
                        if a.startswith('_'):
                            a=a[1:]
                        else:
                            typecode[a]=i
                        print("    CfgID_{} = {},".format(a,i), file=f)
                        i += 1
                    print("""    CfgID_MAX
#define CFG_MAX CfgID_MAX
} ConfigID;""", file=f)

                    for a,v in s.keyval('devices',k,'defs'):
                        if BL and a == "is_bootloader":
                            continue
                        try:
                            v = int(v)
                        except ValueError:
                            v = '"{}"'.format(v.replace('\\','\\\\').replace('"','\\"'))
                        else:
                            if not v:
                                continue

                        print("#define {} {}".format(a.upper(),v), file=f)

                    ow = s.subtree('devices',k,'defs','is_onewire')
                    if ow:
                        print("#define HAVE_ONEWIRE 1", file=f)
                        print("#define ONEWIRE_"+ow.upper(), file=f)

                    for a,v in s.keyval('devices',k,'types'):
                        if a == "config":
                            v = len(s.subtree('codes','blocks'))
                        elif a == "alert":
                            #v = len(s.subtree('codes','types'))
                            v = max_t+1 # ignore codes above this
                        else:
                            v = int(v)
                        print("#define TC_{} {}".format(a.upper(),typecode[a]), file=f)
                        if v > 0:
                            print("#define N_{} {}".format(a.upper(),v), file=f)

                    owp = s.subtree('devices',k,'defs','onewire_io')
                    if owp:
                        assert len(owp) == 2, owp
                        print("#define ONEWIRE_PORT PORT{}".format(owp[0]), file=f)
                        print("#define ONEWIRE_PIN PIN{}".format(owp[0]), file=f)
                        print("#define ONEWIRE_DDR DDR{}".format(owp[0]), file=f)
                        print("#define ONEWIRE_PBIT {}".format(1<<(int(owp[1]))), file=f)

                        try:
                            own = s.subtree('devices',k,'pin_irq',owp)
                        except KeyError:
                            own = s.subtree('devices',k,'pin_irq',owp[0])

                        print("#define ONEWIRE_IRQNUM ({})".format(own), file=f)
                        if (own < 0):
                            print("#define ONEWIRE_IRQ INT{}_vect".format(-own-1), file=f)
                            print("#define ONEWIRE_IER IMSK", file=f)
                            print("#define ONEWIRE_IFR IFR", file=f)
                            print("#define ONEWIRE_IFBIT {}".format(1<<(-own-1)), file=f)
                        else:
                            print("#define ONEWIRE_IRQ PCINT{}_vect".format(own+int(owp[1])), file=f)
                            print("#define ONEWIRE_IFR PCICR", file=f)
                            print("#define ONEWIRE_IFR PCINT{}".format(own>>3), file=f)

                    if temp_nam:
                        print("#define N_TEMP_DRIVER {}".format(len(temp_nam)), file=f)

                    unused  = s.subtree('devices',k,'unused')
                    if unused and len(unused) > 0:
                        print("#define HAVE_UNUSED", file=f)

                    print("""\
#define TC_MAX {}

#endif /* device_{}_config_h */
    """.format(max_t+1,k,k), file=f)

                with open("device/"+k+"/_unused.h","w") as f:
                    print("""\
/*
 * This file is auto-generated. It contains the unused ports on the device "{}".
 *
 * Do not edit. Talk to '{}' instead.
 */
    """.format(k,cfg_name), file=f)
                    unused  = s.subtree('devices',k,'unused')
                    u = {}
                    for v in unused:
                        assert len(v)==2,v
                        assert type(v)==str,v
                        assert v[0] >= 'A' and v[0] <= 'Z', v[0]
                        assert v[1] >= '0' and v[1] <= '7', v[1]
                        port = (ord(v[0]) - ord('A'))
                        pin  = (ord(v[1]) - ord('0'))
                        u[port] = u.get(port,0) | (1 << pin)

                    for v in u:
                        print("UNUSED_PIOS({}, {})".format((v<<3), u[v]), file=f)

            elif mode == "type":
                print(" ".join("{} {}".format(a,v) for a,v in s.keyval('devices',k,'types')))
            elif mode == "cdefs":
                BL = s.subtree('devices',k,'defs','use_bootloader')
                types = dict((a,int(v)) for a,v in s.keyval('devices',k,'types') if int(v) > 0)
                maxtype = max(())
                print(" ".join("-D{}=\"{}\"".format(a.upper(),str(v).replace('"','\"')) for a,v in s.keyval('devices',k,'defs') if a != ("is_bootloader" if BL else "")) + " " + " ".join("-DN_{}={}".format(a.upper(),v) for a,v in s.keyval('devices',k,'types') if int(v) > 0))
            elif mode == "cfiles":
                files = []
                BL = s.subtree('devices',k,'defs','use_bootloader')
                BI = False if BL else s.subtree('devices',k,'defs','is_bootloader')
                ow = s.subtree('devices',k,'defs','is_onewire')
                if BL or not BI:
                    files.append('moat_backend.c')
                ## does not work, needs to be in bootloader memory
                #if BI:
                #    files.append('boot.c')
                if BI:
                    files.append('moat_loader.c')
                if not BL:
                    files.append('main.c')
                    files.append('jmp.S')
                    files.append('dev_data.c')
                    files.append('config.o')
                    for f,v in s.keyval('devices',k,'defs'):
                        if not v: continue
                        if not f.startswith('have_'): continue
                        if os.path.exists(f[5:]+'.c'):
                            files.append(f[5:]+'.c')
                    if not ow: pass
                    else:
                        files.append(ow+'.c')
                        files.append('onewire.c')
                        files.append('crc.c')
                    for f in s.subtree('devices',k,'code'):
                        files.append(f+'.c')

                unused  = s.subtree('devices',k,'unused')
                if unused and len(unused) > 0:
                    files.append("unused.c")

                for f,v in s.keyval('devices',k,'types'):
                    if not v: continue
                    if f[0] == '_': continue
                    if ow == "moat" and ((f in basetypes) if BL else (f not in basetypes) if BI else False):
                        continue
                    if os.path.exists(f+'.c'):
                        files.append(f+'.c')

                if ow == "moat" and not BI:
                    files.extend(moat_files(s,k))

                files.sort()  # Ensure object order is the same every time
                print(" ".join(files))
            else:
                print("Unknown mode:",mode, file=sys.stderr)
                sys.exit(2)
    else:
        import pprint
        pprint.pprint(s.data)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: {} file [type] [key…]".format(sys.argv[0]), file=sys.stderr)
        sys.exit(2)
    main(*sys.argv[1:])
